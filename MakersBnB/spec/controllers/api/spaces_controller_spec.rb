require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe Api::SpacesController, type: :controller do
  render_views

  let(:json) { JSON.parse(response.body) }

  describe 'some API test' do
    it 'returns the JSON spaces objects' do
      new_space = create(:space)
      get :index, format: :json
      expect(json.length).to eq(1)
    end
  end

  # This should return the minimal set of attributes required to create a valid
  # Api::Space. As you add validations to Api::Space, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      name: "my space",
      price: 234,
      location: "newcastle",
      size: 3,
      property_type: "lighthouse"
    }
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # Api::SpacesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #show" do
    it "returns a single space" do
      space = create(:space)
      get :index, id: space, format: :json
      expect(json.last['name']).to eq 'my space'
    end
  end

  describe "POST #create" do
    it 'saves a space object' do
      post :create, {space: valid_attributes, format: :json}
      expect(Api::Space.last.name).to eq 'my space'
    end
  end

  describe "DELETE #destroy" do
    it 'delete a space' do
      create(:space)
      delete :destroy, format: :json, id: 4
      expect(Api::Space.where(id: 4)).to be_empty
    end
  end

  describe "GET #index" do
    it "assigns all api_spaces as @api_spaces" do
      space = Api::Space.create! valid_attributes
      get :index, {}, valid_session
      expect(assigns(:api_spaces)).to eq([space])
    end
  end

  describe "GET #show" do
    it "assigns the requested api_space as @api_space" do
      space = Api::Space.create! valid_attributes
      get :show, {:id => space.to_param}, valid_session
      expect(assigns(:api_space)).to eq(space)
    end
  end

  describe "GET #new" do
    it "assigns a new api_space as @api_space" do
      get :new, {}, valid_session
      expect(assigns(:api_space)).to be_a_new(Api::Space)
    end
  end

  describe "GET #edit" do
    it "assigns the requested api_space as @api_space" do
      space = Api::Space.create! valid_attributes
      get :edit, {:id => space.to_param}, valid_session
      expect(assigns(:api_space)).to eq(space)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Api::Space" do
        expect {
          post :create, {:space => valid_attributes}, valid_session
        }.to change(Api::Space, :count).by(1)
      end

      it "assigns a newly created api_space as @api_space" do
        post :create, {:space => valid_attributes}, valid_session
        expect(assigns(:api_space)).to be_a(Api::Space)
        expect(assigns(:api_space)).to be_persisted
      end

      it "redirects to the created api_space" do
        post :create, {:space => valid_attributes}, valid_session
        expect(response).to redirect_to(Api::Space.last)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved api_space as @api_space" do
        post :create, {:space => invalid_attributes}, valid_session
        expect(assigns(:api_space)).to be_a_new(Api::Space)
      end

      it "re-renders the 'new' template" do
        post :create, {:space => invalid_attributes}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
      }

      it "updates the requested api_space" do
        space = Api::Space.create! valid_attributes
        put :update, {:id => space.to_param, :space => new_attributes}, valid_session
        space.reload
        skip("Add assertions for updated state")
      end

      it "assigns the requested api_space as @api_space" do
        space = Api::Space.create! valid_attributes
        put :update, {:id => space.to_param, :space => valid_attributes}, valid_session
        expect(assigns(:api_space)).to eq(space)
      end

      it "redirects to the api_space" do
        space = Api::Space.create! valid_attributes
        put :update, {:id => space.to_param, :space => valid_attributes}, valid_session
        expect(response).to redirect_to(space)
      end
    end

    context "with invalid params" do
      it "assigns the api_space as @api_space" do
        space = Api::Space.create! valid_attributes
        put :update, {:id => space.to_param, :space => invalid_attributes}, valid_session
        expect(assigns(:api_space)).to eq(space)
      end

      it "re-renders the 'edit' template" do
        space = Api::Space.create! valid_attributes
        put :update, {:id => space.to_param, :space => invalid_attributes}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested api_space" do
      space = Api::Space.create! valid_attributes
      expect {
        delete :destroy, {:id => space.to_param}, valid_session
      }.to change(Api::Space, :count).by(-1)
    end

    it "redirects to the api_spaces list" do
      space = Api::Space.create! valid_attributes
      delete :destroy, {:id => space.to_param}, valid_session
      expect(response).to redirect_to(api_spaces_url)
    end
  end

end
